#####################################################################
#   Macros
#####################################################################
[gcode_macro PARK]
gcode:
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30  F10000
    STATUS_READY

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    {% if printer.toolhead.homed_axes != 'xyz' %}
      STATUS_HOMING
      G28
    {% endif %}

    {% if printer.quad_gantry_level.applied|lower == 'false' %}
      STATUS_LEVELING
      QUAD_GANTRY_LEVEL
    {% endif %}
    
    STATUS_CALIBRATING_Z
    G28 Z

    PARK
    STATUS_READY
   
#[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
#gcode:
#    STOP_LED_EFFECTS
#    G32                            ; home all axes
#    STATUS_MESHING
    #BED_MESH_CALIBRATE
    
#    G90                            ; absolute positioning
#    G1 Z20 F3000                   ; move nozzle away from bed
#    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.5

#    STATUS_BUSY

#####################################################################
#   A better print_start macro for v2/trident
#####################################################################

## *** THINGS TO UNCOMMENT: ***
## Bed mesh (2 lines at 2 locations)
## Nevermore (if you have one)
## Z_TILT_ADJUST (For Trident only)
## QUAD_GANTRY_LEVEL (For V2.4 only)
## Beacon Contact logic (if you have one. 4 lines at 4 locations)

[gcode_macro PRINT_START]
gcode:
  # This part fetches data from your slicer. Such as bed, extruder, and chamber temps and size of your printer.
  {% set target_bed = params.BED|int %}
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_chamber = params.CHAMBER|default("40")|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}

  ##  Uncomment for Beacon Contact (1 of 4 for beacon contact)
  #SET_GCODE_OFFSET Z=0                                 # Set offset to 0

  # Home the printer, set absolute positioning and update the Stealthburner LEDs.
  STATUS_HOMING                                         # Set LEDs to homing-mode
  G28                                                   # Full home (XYZ)
  G90                                                   # Absolute position

  ##  Uncomment for bed mesh (1 of 2 for bed mesh)
  BED_MESH_CLEAR                                       # Clear old saved bed mesh (if any)

  # Check if the bed temp is higher than 90c - if so then trigger a heatsoak.
  {% if params.BED|int > 90 %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    #M106 S255                                           # Turn on the PT-fan

    ##  Uncomment if you have a Nevermore.
    #SET_PIN PIN=nevermore VALUE=1                      # Turn on the nevermore

    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Heatsoak: {target_chamber}c"  # Display info on display
    TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={target_chamber}   # Waits for chamber temp

  # If the bed temp is not over 90c, then skip the heatsoak and just heat up to set temp with a 5 min soak
  {% else %}
    SET_DISPLAY_TEXT MSG="Bed: {target_bed}c"           # Display info on display
    STATUS_HEATING                                      # Set LEDs to heating-mode
    G1 X{x_wait} Y{y_wait} Z15 F9000                    # Go to center of the bed
    M190 S{target_bed}                                  # Set the target temp for the bed
    SET_DISPLAY_TEXT MSG="Soak for 5 min"               # Display info on display
    G4 P300000                                          # Wait 5 min for the bedtemp to stabilize
  {% endif %}

  # Heat hotend to 150c. This helps with getting a correct Z-home.
  SET_DISPLAY_TEXT MSG="Hotend: 150c"                   # Display info on display
  M109 S150                                             # Heat hotend to 150c

  ##  Uncomment for Beacon contact (2 of 4 for beacon contact)
  #G28 Z METHOD=CONTACT CALIBRATE=1                     # Calibrate z offset and beacon model

  ##  Uncomment for Trident (Z_TILT_ADJUST)
  #SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  #STATUS_LEVELING                                      # Set LEDs to leveling-mode
  #Z_TILT_ADJUST                                        # Level the printer via Z_TILT_ADJUST
  #G28 Z                                                # Home Z again after Z_TILT_ADJUST

  ##  Uncomment for V2.4 (Quad gantry level AKA QGL)
  SET_DISPLAY_TEXT MSG="Leveling"                      # Display info on display
  STATUS_LEVELING                                      # Set LEDs to leveling-mode
  QUAD_GANTRY_LEVEL                                    # Level the printer via QGL
  G28 Z                                                # Home Z again after QGL

  ##  Uncomment for bed mesh (2 of 2 for bed mesh)
  SET_DISPLAY_TEXT MSG="Bed mesh"                      # Display info on display
  STATUS_MESHING                                       # Set LEDs to bed mesh-mode
  BED_MESH_CALIBRATE                                   # Start the bed mesh (add ADAPTIVE=1) for adaptive bed mesh

  ## Uncomment for Beacon Contact (3 of 4 for beacon contact)
  #G28 Z METHOD=CONTACT CALIBRATE=0                     # Calibrate z offset only with hot nozzle

  # Heat up the hotend up to target via data from slicer
  SET_DISPLAY_TEXT MSG="Hotend: {target_extruder}c"     # Display info on display
  STATUS_HEATING                                        # Set LEDs to heating-mode
  G1 X{x_wait} Y{y_wait} Z15 F9000                      # Go to center of the bed
  M107                                                  # Turn off partcooling fan
  M109 S{target_extruder}                               # Heat the hotend to set temp

  ##   Uncomment for Beacon Contact (4 of 4 for beacon contact)
  #SET_GCODE_OFFSET Z=0.06                              # Add a little offset for hotend thermal expansion

  # Get ready to print by doing a primeline and updating the LEDs
  SET_DISPLAY_TEXT MSG="Printer goes brr"               # Display info on display
  STATUS_PRINTING                                       # Set LEDs to printing-mode
  G0 X{x_wait - 50} Y4 F10000                           # Go to starting point
  G0 Z0.4                                               # Raise Z to 0.4
  G91                                                   # Incremental positioning 
  G1 X100 E20 F1000                                     # Primeline
  G90                                                   # Absolute position
   

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 20, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS

    G90                                      ; absolute positioning
    G0 Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{x_safe} Y{y_safe}  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan

    SET_FAN_SPEED FAN=exhaust_fan SPEED=1.0
    
    BED_MESH_CLEAR

    STATUS_READY

    SET_LED_EFFECT EFFECT=logo_bed_temp
    SET_LED_EFFECT EFFECT=sb_nozzle_temp

    # The purpose of the SAVE_GCODE_STATE/RESTORE_GCODE_STATE
    # command pair is to restore the printer's coordinate system
    # and speed settings since the commands above change them.
    # However, to prevent any accidental, unintentional toolhead
    # moves when restoring the state, explicitly set MOVE=0.
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END MOVE=0
	
[gcode_macro SPEED_TEST_XY]
gcode:
	g0 f50000
	g0 x230 y250
	g0 x0 y0
	g0 y508
	g0 x460 y0
	g0 y508
	g0 x0 y0
	g0 x460
	g0 x0 y508
	g0 x460
	g0 x230 y250
	g0 z50

    # https://klipper.discourse.group/t/interruptible-heat-soak/1552
[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50

    ;; put the bed and nozzle where they're a safe distance apart
    G28
    CENTER

    M84 ;; turn off steppers

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

[gcode_macro _SET_FAN_SPEED]
gcode:
    M106 S{ (params.PERCENT | float) * 255 / 100 }


[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

[gcode_macro CHANGE_FILAMENT]
gcode:
    {% set BEEP = params.BEEP|default(2)|int %} ; Number of beeps to alert user
    {% set X = params.X|default(350)|float %} ; X position for filament change
    {% set Y = params.Y|default(5)|float %} ; Y position for filament change
    {% set Z = params.Z|default(10)|float %} ; Z relative lift for filament change position
    
    PAUSE X={X} Y={Y} Z={Z} BEEP=0
    UNLOAD_FILAMENT
    #BEEP R={BEEP}

[gcode_macro BEEP]
gcode:
    {% set TONE = params.TONE|default(840)|int %}
    {% set VOLUME = params.VOLUME|default(80)|int %} ; volume % [0..100]
    {% set DURATION = params.DURATION|default(100)|int %} ; 100ms
    {% set REPETITIONS = params.REPETITIONS|default(params.R | default(1))|int %} ; number of repetitions (R as alias)
    {% set DELAY = params.DELAY|default(100)|int %} ; delay between repetitions, in ms
    {% set PWM_MAX = params.PWM_MAX|default(0.8)|float %} ; pwm at max tone pitch (before performances decay)
    
    # input validation
    {% set IS_VALID = false %}
    
    {% if TONE < 0 %}
        {% set IS_VALID = false %}
        { action_respond_info("Invalid tone value. Must be greather equal to zero") }
    {% endif %}    
    
    {% if VOLUME < 0 or VOLUME > 100 %}
        {% set IS_VALID = false %}
        { action_respond_info("Invalid volume value. Must be between 0 and 100") }
    {% endif %}

    {% if PWM_MAX < 0 or PWM_MAX > 1 %}
        {% set IS_VALID = false %}
        { action_respond_info("Invalid pwm max value. Must be between 0 and 1") }
    {% endif %}
    
    {% if DURATION <= 0 %}
        {% set IS_VALID = false %}
        { action_respond_info("Invalid duration. Must be greather than zero") }
    {% endif %}  
    
    {% if DELAY <= 0 %}
        {% set IS_VALID = false %}
        { action_respond_info("Invalid delay between repetitions. Must be greather than zero") }
    {% endif %}    

    {% if REPETITIONS < 0 %}
        {% set IS_VALID = false %}
        { action_respond_info("Invalid repetition number. Must be greather equal to zero") }
    {% endif %}
    
    # routine
    {% if IS_VALID %}
        {% for r in range(REPETITIONS) %}
            SET_PIN PIN=BEEPER VALUE={(((((((VOLUME, 100)|min),0)|max))) * PWM_MAX) | round()} {% if TONE > 0 %}CYCLE_TIME={1/TONE|int | round(4)}{% endif %}
            SLEEP MS={DURATION}
            SET_PIN PIN=BEEPER VALUE=0
            {% if not loop.last %}SLEEP MS={DELAY}{% endif %}
        {% endfor %}
    {% endif %}

[gcode_macro LOAD_FILAMENT]
gcode: |
   {% if (not(printer.idle_timeout.state == "Printing") or printer.pause_resume.is_paused) %}
      SAVE_GCODE_STATE NAME=LOAD_state
      M117 Loading filament..
      M83                            ; set extruder to relative
      G1 E50 F300                    ; load (multiple times to avoid length limit)
      G1 E50 F300
      G1 E50 F300
      G1 E-1 F300                    ; short retract
      M117 Filament loaded
      UPDATE_DELAYED_GCODE ID=SCHEDULE_CLEAR_SCREEN DURATION=5
      RESTORE_GCODE_STATE NAME=LOAD_state
   {% else %}
      { action_respond_info("Filament loading disabled while printing!") }
   {% endif %}

[gcode_macro M600]
gcode:
   {% set B = params.B|default(2)|int %}  ; Number of beeps to alert user
   {% set X = params.X|default(350)|float %} ; X position for filament change
   {% set Y = params.Y|default(5)|float %} ; Y position for filament change
   {% set Z = params.Z|default(10)|float %} ; Z relative lift for filament change position
    
   CHANGE_FILAMENT BEEP={B} X={X} Y={Y} Z={Z}

[gcode_macro M601]
gcode:
   {% set B = params.B|default(2)|int %} ; Number of beeps to alert user
   {% set X = params.X|default(350)|float %} ; X position for tool parking
   {% set Y = params.Y|default(5)|float %} ; Y position for tool parking
   {% set Z = params.Z|default(10)|float %} ; Z relative lift for tool parking
    
   PAUSE X={X} Y={Y} Z={Z} BEEP={B}

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
   {% set BEEP = params.BEEP|default(2)|int %} ; Number of beeps to alert user
   {% set X = params.X|default(230)|float %} ; X position
   {% set Y = params.Y|default(5)|float %} ; Y position
   {% set Z = params.Z|default(20)|float %} ; Z relative lift
    
   {% if not printer.pause_resume.is_paused %}
      M400
      SAVE_GCODE_STATE NAME=PAUSE_state
      BASE_PAUSE
      #BEEP
      M400
      M83
      G91 
      G92 E0
      G1 E-0.8 F2700
      G1 Z{Z} F1800
      G90
      G1 X{X} Y{Y} F8400
      G91
      G1 E-10 F1800
      SLEEP MS=200
      #BEEP R={BEEP}
   {% endif %}

[gcode_macro PURGE_NOZZLE]
gcode: |
    {% set LENGTH = params.LENGTH|default(20)|float %} ; purge length
    {% set SPEED = params.SPEED|default(300)|int %} ; mm/min
    {% set RETRACTION_LENGTH = params.RETRACTION_LENGTH|default(3)|float %} ; retract distance after purge
    {% set RETRACTION_SPEED = params.RETRACTION_SPEED|default(600)|int %} ; retract distance after purge mm/min
    
    SAVE_GCODE_STATE NAME=purge_nozzle_state
    M117 Purging..
    #beep TONE=1800 DURATION=100 REPETITIONS=2 DELAY=200
    G91
    M83
    G92 E0
    G1 E{LENGTH} F{SPEED}; purge 10mm
    #BEEP
    SLEEP MS=500
    G1 E{ -1 * RETRACTION_LENGTH} F{RETRACTION_SPEED}; retract 3mm
    CLEAR_SCREEN
    RESTORE_GCODE_STATE NAME=purge_nozzle_state

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode: |
    {% if not printer.pause_resume.is_paused %}
      { action_respond_info("Print is not paused, resume aborted") }
    {% else %}
        PURGE_NOZZLE LENGTH=20 RETRACTION_LENGTH=1
        SLEEP
        RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1 MOVE_SPEED=200
        BASE_RESUME
    {% endif %}

[gcode_macro UNLOAD_FILAMENT]
gcode:
   {% if (not(printer.idle_timeout.state == "Printing") or printer.pause_resume.is_paused) %}
      SAVE_GCODE_STATE NAME=UNLOAD_state
      
      M83                            ; set extruder to relative
      G1 E5 F450                     ; quick purge
      G1 E-4 F1800                   ; fast retract
      G1 E-16 F1200                  ; retract
      SLEEP MS=1000                  ; wait for filament to cool
      G1 E-10 F300                   ; slow retract purge
      G1 E-75 F1200                  ; fast retract all filament
      G1 E-75 F1200                  ; fast retract all filament
      M117 Filament unloaded

      UPDATE_DELAYED_GCODE ID=SCHEDULE_CLEAR_SCREEN DURATION=5
      RESTORE_GCODE_STATE NAME=UNLOAD_state
   {% else %}
      { action_respond_info("Filament unloading disabled while printing!") }
   {% endif %}

[gcode_macro SLEEP]
gcode:
    {% set MS = params.MS|default(1000)|int %} ; pause duration in ms
    
    G4 P{MS}

[gcode_macro CLEAR_SCREEN]
gcode: M117

[gcode_macro M900]
gcode:
    {% set K = params.K|default(0)|float %} 
    ;SET_PRESSURE_ADVANCE ADVANCE={K}

[gcode_macro M191]
gcode:
    {% set S = params.S|default(0) %}
    {% set R = params.R|default(120) %}
    TEMPERATURE_WAIT SENSOR="temperature_sensor Chamber" MINIMUM={S} MAXIMUM={R}

      